#Flight Booking Service

This application uses a SQL db on Microsoft Azure to store flight data, and connects to it using Java 8 jdk

You have two main tasks:
Design a database of your customers and the flights they book.
Complete a working prototype of your flight booking application that connects to the database then allows customers to use a CLI to search, book, cancel, etc. flights.


Data Model:

The flight service system consists of the following logical entities. These entities are not necessarily database tables. It is up to you to decide what entities to persist 
and create a physical schema design that has the ability to run the operations below, which make use of these entities.
Flights / Carriers / Months / Weekdays:  For this application, we have very limited functionality so you shouldn’t need to modify the schema
Users: A user has a username (varchar), password hash (varbinary), password salt (varbinary), and balance (int) for their account. All usernames should be unique in the system. Each user can have any number of reservations. There is no restriction on passwords when creating a new user. Usernames are case insensitive (this is the default for SQL Server). Since we are salting and hashing our passwords through the Java application, passwords are case sensitive.
Itineraries: An itinerary is either a direct flight (consisting of one flight: origin --> destination) or a one-hop flight (consisting of two flights: origin --> stopover city, stopover city --> destination). Itineraries are returned by the search command.
Reservations: A booking for an itinerary, which may consist of one (direct) or two (one-hop) flights. Each reservation can either be paid or unpaid and has a unique ID.


Application Requirements
Requirements
The following are the functional specifications for the flight service system, to be implemented in Query.java (see code for full specification as to what error message to return, etc):
create takes in a new username (string), password (string), and initial account balance (int) as input. It creates a new user account with the initial balance. It should return an error if negative, or if the username already exists. Usernames are checked case-insensitively. For simplicity, you can assume that all usernames and passwords have at most 20 characters. We will store the salted password hash and the salt itself to avoid storing passwords in plain text. Use the following code snippet to as a template for computing the hash given a password string:
// Generate a random cryptographic salt
SecureRandom random = new SecureRandom();
byte[] salt = new byte[16];
random.nextBytes(salt);

// Specify the hash parameters
KeySpec spec = new PBEKeySpec(password.toCharArray(), salt, HASH_STRENGTH, KEY_LENGTH);

// Generate the hash
SecretKeyFactory factory = null;
byte[] hash = null;
try {
  factory = SecretKeyFactory.getInstance("PBKDF2WithHmacSHA1");
  hash = factory.generateSecret(spec).getEncoded();
} catch (NoSuchAlgorithmException | InvalidKeySpecException ex) {
  throw new IllegalStateException();
}


login takes in a username (string) and password (string) and checks that the user exists in the database and that the password matches. To compute the hash, adapt the above code.   

Within a single session (that is, a single instance of your program), only one user should be logged in.  You can track this via a local variable in your program.  If a second login attempt is made, please return “User already logged in”.  Across multiple sessions (that is, if you run your program multiple times), the same user is allowed to be logged in.  This means that you do not need to track a user’s "logged in status" inside the database.

search takes as input an origin city (string), a destination city (string), a flag for only direct flights or not (0 or 1), the date (int), and the maximum number of itineraries to be returned (int). For the date, we only need the day of the month, since our dataset comes from July 2015.
Return only flights that are not canceled, ignoring the capacity and number of seats available. If the user requests n itineraries to be returned, there are a number of possibilities:
direct=1: return up to n direct itineraries
direct=0: return up to n direct itineraries. If there are k direct itineraries (where k < n), then return the k direct itineraries and then return up to (n-k) of the shortest indirect itineraries with the flight times.
For one-hop flights, different carriers can be used for the flights. For the purpose of this assignment, an indirect itinerary means the first and second flight only must be on the same date (i.e., if flight 1 runs on the 3rd day of July, flight 2 runs on the 4th day of July, then you can't put these two flights in the same itinerary as they are not on the same day).

Sort your results. In all cases, the returned results should be primarily sorted on total actual_time (ascending). If a tie occurs, break that tie by the fid value. Use the first then the second fid for tie-breaking.

Below is an example of a single direct flight from Seattle to Boston. Actual itinerary numbers might differ, notice that only the day is printed out since we assume all flights happen in July 2015:

Itinerary 0: 1 flight(s), 297 minutes 
ID: 60454 Day: 1 Carrier: AS Number: 24 Origin: Seattle WA Dest: Boston MA Duration: 297 Capacity: 14 Price: 140

Below is an example of two indirect flights from Seattle to Boston:

Itinerary 0: 2 flight(s), 317 minutes 
ID: 704749 Day: 10 Carrier: AS Number: 16 Origin: Seattle WA Dest: Orlando FL Duration: 159 Capacity: 10 Price: 494 
ID: 726309 Day: 10 Carrier: B6 Number: 152 Origin: Orlando FL Dest: Boston MA Duration: 158 Capacity: 0 Price: 104 
Itinerary 1: 2 flight(s), 317 minutes 
ID: 704749 Day: 10 Carrier: AS Number: 16 Origin: Seattle WA Dest: Orlando FL Duration: 159 Capacity: 10 Price: 494 
ID: 726464 Day: 10 Carrier: B6 Number: 452 Origin: Orlando FL Dest: Boston MA Duration: 158 Capacity: 7 Price: 760

Note that for one-hop flights, the results are printed in the order of the itinerary, starting from the flight leaving the origin and ending with the flight arriving at the destination.

The returned itineraries should start from 0 and increase by 1 up to n as shown above. If no itineraries match the search query, the system should return an informative error message. See Query.java for the actual text.

The user need not be logged in to search for flights.

All flights in an indirect itinerary should be under the same itinerary ID. In other words, the user should only need to book once with the itinerary ID for direct or indirect trips.

Book: lets a user book an itinerary by providing the itinerary number as returned by a previous search. The user must be logged in to book an itinerary and must enter a valid itinerary id that was returned in the last search that was performed within the same login session. Make sure you make the corresponding changes to the tables in case of a successful booking. Once the user logs out (by quitting the application), logs in (if they previously were not logged in), or performs another search within the same login session, then all previously returned itineraries are invalidated and cannot be booked. If the booking is successful, then assign a new reservation ID to the booked itinerary. Note that 1) each reservation can contain up to 2 flights (in the case of indirect flights), and 2) each reservation should have a unique ID that incrementally increases by 1 for each successful booking.

Pay: allows a user to pay for an existing reservation. It first checks whether the user has enough money to pay for all the flights in the given reservation. If successful, it updates the reservation to be paid.

Reservations: lists all reservations for the user. Each reservation must have a unique identifier (which is different for each itinerary) in the entire system, starting from 1 and increasing by 1 after a reservation has been made. There are many ways to implement this. One possibility is to define an "ID" table that stores the next ID to use and update it each time when a new reservation is made successfully. The user must be logged in to view reservations. The itineraries should be displayed using a similar format as that used to display the search results, and they should be shown in increasing order of reservation ID under that username. Canceled reservations should not be displayed.

Cancel: lets a user cancel an existing reservation. The user must be logged in to cancel reservations and must provide a valid reservation ID. Make sure you make the corresponding changes to the tables in case of a successful cancellation (e.g. if a reservation is already paid, then the customer should be refunded).

Quit: leaves the interactive system and logs out the current user (if logged in).


surapan1/FlightBookingService/cases - These are test cases to test out the application functionality
surapan1/FlightBookingService/src/main/FlightService.java - This is the UI and db connection details for the booking app
surapan1/FlightBookingService/src/main/Query.java - This is the main functionality, including sql queries, of the booking app
surapan1/FlightBookingService/src/test/FlightServiceTest.java - This helps to run the test cases
surapan1/FlightBookingService/createTables.sql - this is the create table statemnt in SQL
surapan1/FlightBookingService/dbconn.properties - connection details for the Azure db

